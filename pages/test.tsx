import { useRef, useState, useEffect } from "react";
import Head from "next/head";
import Webcam from "react-webcam";
import { drawConnectors, drawLandmarks } from "@mediapipe/drawing_utils";
import { HAND_CONNECTIONS } from "@mediapipe/hands";

function Test() {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const webcamRef = useRef<Webcam>(null);

  // const clickHandler = async () => {
  //   const webcam = webcamRef.current.video as HTMLVideoElement;
  //   const canvas = canvasRef.current;
  //   // Make the canvas, webcam, and video size all the same size.
  //   webcam.width = canvas.width = webcam.videoWidth;
  //   webcam.height = canvas.height = webcam.videoHeight;
  //   const context = canvas.getContext("2d");
  //   context.clearRect(0, 0, canvas.width, canvas.height);

  //   function onResults(results) {
  //     context.save();
  //     context.clearRect(0, 0, canvas.width, canvas.height);
  //     context.drawImage(results.image, 0, 0, canvas.width, canvas.height);
  //     if (results.multiHandLandmarks) {
  //       for (const landmarks of results.multiHandLandmarks) {
  //         drawConnectors(context, landmarks, HAND_CONNECTIONS, {
  //           color: "#00FF00",
  //           lineWidth: 5,
  //         });
  //         drawLandmarks(context, landmarks, { color: "#FF0000", lineWidth: 2 });
  //       }
  //     }
  //     context.restore();
  //   }

  return (
    <div>
      <Head>
        <title>Travel App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/static/logo.jpg" />
      </Head>
      <header>
        <h1>Title</h1>
      </header>
      <main>
        <div>
          <Webcam audio={false} ref={webcamRef} />
          <canvas ref={canvasRef} />
        </div>
        <div>{/* <button onClick={clickHandler}>Button</button> */}</div>
      </main>
    </div>
  );
}

export default Test;
